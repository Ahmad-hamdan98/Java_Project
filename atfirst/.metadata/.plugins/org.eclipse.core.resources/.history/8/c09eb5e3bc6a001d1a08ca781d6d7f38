package com.java.project.Controllers;

import java.security.Principal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.mail.MessagingException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.java.project.Models.Cars;
import com.java.project.Models.Parts;
import com.java.project.Models.User;
import com.java.project.Models.add_part;
import com.java.project.Models.orders;
import com.java.project.Serveses.EmailSenderService;
import com.java.project.Serveses.Serveses;
import com.java.project.validator.UserValidator;

@Controller
public class Controllers {
	private Serveses userService;
	private UserValidator userValidator;
	@Autowired
	private EmailSenderService senderService;
	
	
	public Controllers(Serveses userService, UserValidator userValidator) {
		super();
		this.userService = userService;
		this.userValidator = userValidator;
	}

	@RequestMapping("/register")
	public String registration(
			@Valid @ModelAttribute("user") User user, 
			BindingResult result, 
			Model model, 
			HttpSession session,
			HttpServletRequest request ,@RequestParam("email")String email) {
		userValidator.validate(user, result);
		
		// Store the password before it is encrypted
		String password = user.getPassword();
		if(result.hasErrors()) {
			return "loginPage.jsp";
		}
		// Make first user SUPER ADMIN
		if(userService.allUsers().size()==0) {
			userService.newUser(user, "ROLE_ADMIN");
		}else {
			userService.newUser(user, "ROLE_USER");
//			session.setAttribute("user_id", newUser.getId());
		}
		senderService.sendSimpleEmail(email,
				"onlin Garage",
				"Thank you to vist our online site");
		// Log in new user with the password we stored before encrypting it
		authWithHttpServletRequest(request, user.getEmail(), password);
		return "redirect:/";
	}
	
	// We will call this method to automatically log in newly registered users
	public void authWithHttpServletRequest(HttpServletRequest request, String email, String password) {
	    try {
	        request.login(email, password);
	    } catch (ServletException e) {
	    	System.out.println("Error while login: " + e);
	    }
	}
	
	@RequestMapping("/admin")
	public String adminPage(@ModelAttribute("addpart") Parts part ,BindingResult result ,Principal principal, Model model) {
		String email = principal.getName();
		model.addAttribute("currentUser", userService.findByEmail(email));
		model.addAttribute("users", userService.allUsers());
		List<Parts> allparts=userService.allpart();
		model.addAttribute("allparts", allparts);
		return "adminPage.jsp";
	}
	
	@RequestMapping("/admin/{id}")
	public String makeAdmin(@PathVariable("id") Long id, Model model) {
		
		User user = userService.findById(id);
		userService.upgradeUser(user);
		
		model.addAttribute("users", userService.allUsers());
		 
		return "redirect:/admin";
	}
	
	@RequestMapping("/login")
	public String login(
			@ModelAttribute("user") User user,
			@RequestParam(value="error", required=false) String error, 
			@RequestParam(value="logout", required=false) String logout, 
			Model model) {
		
		
		if(error!=null) {
			model.addAttribute("errorMessage","Invalid Credentials, Please try again.");
		}
		if(logout!=null) {
			model.addAttribute("logoutMessage","Logout Successful!");
		}
		
		return "loginPage.jsp";
	}
	
	@RequestMapping(value={"/", "/home"})
	public String home(Principal principal, Model model,HttpSession session) {
		String email = principal.getName();
		User user = userService.findByEmail(email);
		model.addAttribute("user", user);
		session.setAttribute("user", user);
		
		if(user!=null) {
			user.setLastLogin(new Date());
			userService.updateUser(user);
			// If the user is an ADMIN or SUPER_ADMIN they will be redirected to the admin page
			if(user.getRoles().get(0).getName().contains("ROLE_ADMIN")||user.getRoles().get(0).getName().contains("ROLE_ADMIN")) {
				model.addAttribute("currentUser", userService.findByEmail(email));
				model.addAttribute("users", userService.allUsers());
				return "adminPage.jsp";
			}
			// All other users are redirected to the home page
		}
		
		return "home.jsp";
	}
	
//	@RequestMapping("/delete/{id}")
//	public String deleteUser(@PathVariable("id") Long id, HttpSession session, Model model) {	
//		User user = userService.findById(id);
//		userService.deleteUser(user);
//		
//		model.addAttribute("users", userService.allUsers());
//		 
//		return "redirect:/admin";
//	}
    @GetMapping("/profile")
    public String profile(Principal principal, Model model) {
        String email = principal.getName();
     model.addAttribute("currentUser", userService.findByEmail(email));
        return "profilPage.jsp";
    }
//----------------------------------------------------------------------------------	
//	 @Autowired
//	public final Serveses userServ;
//
//	 public Controllers(Serveses userServes) {
//		
//		this.userServ = userServes;
//	}
//	 @GetMapping("/login")
//	    public String index(Model model) {
//	        model.addAttribute("newUser", new User());
//	        model.addAttribute("newLogin", new Login());
//	        return "login.jsp";
//	    }
//	    @PostMapping("/register")
//	    public String register(@Valid @ModelAttribute("newUser") User newUser, 
//	            BindingResult result, Model model, HttpSession session) {
//	    	userServ.register(newUser, result);
//	        if(result.hasErrors()) {
//	            // Be sure to send in the empty LoginUser before 
//	            // re-rendering the page.
//	            model.addAttribute("newLogin", new Login());
//	            return "login.jsp";
//	        }
//	        session.setAttribute("user_id", newUser.getId());
//	        return "redirect:/home";
//	    }
//
//	    @PostMapping("/login")
//	    public String login(@Valid @ModelAttribute("newLogin") Login newLogin, 
//	            BindingResult result, Model model, HttpSession session) {
//
//	        // Add once service is implemented:
//	         User user = userServ.login(newLogin, result);
//	        if(result.hasErrors()) {
//	            model.addAttribute("newUser", new User());
//	            return "login.jsp";
//	        }
//	        session.setAttribute("user_id", user.getId());
//	        return "redirect:/home";
//	    }
//	    @GetMapping("/logout")
//	    public String logout(HttpSession session) {
//	    	session.invalidate();
//	    	return "redirect:/welcome";
//
//	    }
//-------------------------------------------------------------------------------------------	    
	    @GetMapping("/")
	    public String home(Model model,HttpSession session) {
//	    	List<Team> projects = userServ.findAll();
//	    	model.addAttribute("team", projects);
//	    	if(session.getAttribute("user_id")!=null){
//	    	User user = userService.findUser((Long) session.getAttribute("user_id"));
	    	
//	    	List<Projects> projects2 = userServ.allos(user);
//	    	model.addAttribute("projects2", projects2);
//	    	model.addAttribute("user", user);
//	    	}
	    	
	    	return "redirect:/home";
	    }
	   
	    
	    @GetMapping("/home")
	    public String home1(@ModelAttribute("car") Cars car,Model model,HttpSession session,Principal principal) {

	    	
//	    		User user = userService.findUser((Long) session.getAttribute("user_id"));
//	    		Cars car=userServ.findCarById(id);
	    		String email = principal.getName();
				User user = userService.findByEmail(email);
				model.addAttribute("user", user);
	    		List<Parts> allparts=userService.allpart();
	    		model.addAttribute("allparts", allparts);
	    		
	    		
	    	
	    	return "ShowAll.jsp";
	    }
	    
	    @GetMapping("/about")
	    public String about() {
	    	return "about.jsp";
	    }
	    
	    
//------------------------------------------------------------------------------------------------Cars	    
	      @GetMapping("/editcar/{id}")
	        public String index2(@PathVariable("id") Long id, Model model) {
	            model.addAttribute("car", userService.findCarById(id));
	            return "EditCar.jsp";
	        }
	       // edit car
	       @PutMapping("/editcar/{id}")
	       public String editcar(@Valid @ModelAttribute("car") Cars car,BindingResult result, HttpSession session) {
	           if (result.hasErrors()) {
	                return "EditCar.jsp";
	            } else {
	                userService.updatecar(car);
	                return "redirect:/home";
	            }
	       }
	       
	    @GetMapping("/addcar")
	    public String addcar(@ModelAttribute("car") Cars car,Principal principal,Model model) {
	    	String email = principal.getName();
	    	User user = userService.findByEmail(email);
	    	model.addAttribute("user", user);
	    	return "addcarpage.jsp";
	    }
	   
	    @PostMapping("/addcare")
	    public String createCar(@Valid @ModelAttribute("car") Cars car ,BindingResult result ,Model model,HttpSession session) {
	        if (result.hasErrors()) {
	            return "addcarpage.jsp";
	        } else {
	        	
	        	userService.createcar(car);
	    		
//	         	user.getTeams().add(car);
//	    		userServ.createTeam(car);
	            return "redirect:/home";
	        }
	    }
	    
	    @GetMapping("/showcar")
	    public String ShowCar(Principal principal,Model model,HttpSession session) {
	    	
	    	String email = principal.getName();
			User user = userService.findByEmail(email);	    	
	    	model.addAttribute("user", user);
	    	List<Cars> Allcars= userService.findAllCars();
	    	model.addAttribute("allcars", Allcars);
	    	return "ShowCars.jsp";
	    	
	    }
//--------------------------------------------------------------------------------------Orders
	    @GetMapping("/showorders")
	    public String Showorders(Principal principal,Model model,HttpSession session) {
	    	
	    	String email = principal.getName();
			User user = userService.findByEmail(email);	    	
	    	model.addAttribute("user", user);
	    	List<Cars> Allcars= userService.findAllCars();
	    	model.addAttribute("allcars", Allcars);
	    	List<orders> allorder=userService.findAllOrders();
	    	model.addAttribute("allorder", allorder);
	    	
	    	return "Showorders.jsp";
	    }
	    @GetMapping("/makeorder")
	    public String orderOrders(Principal principal,Model model,HttpSession session) {
//	    	Parts part = userService.findById1(id);
//	    	
////	    	List<orders> orders=userService.addpart(part);
////	    	orders order=userService.allpart();
//	    	
//	    	String email = principal.getName();
//	    	User user = userService.findByEmail(email);	    	
//	    	model.addAttribute("user", user);
//	    	user.getOrders().addpart(part);
	    	
	    	
	    	String email = principal.getName();
	    	User user = userService.findByEmail(email);
	    	model.addAttribute("user", user);
	    	List<Parts> allparts=userService.allpart();
    		model.addAttribute("allparts", allparts);
	    	return "ShowAll1.jsp";
	    }
	    @GetMapping("/neworder/{idI}")
	      public String order(@PathVariable("idI")Long idI,Principal principal,HttpSession session,Model model) { 

	        int sum=0;
	        int amount=0;
	        String email = principal.getName();
	         Parts part = userService.findById1(idI);
	         
	         if(session.getAttribute("order")==null) {
	             orders order =new orders();
	           
	             
	             
	            List<Parts> i=new ArrayList<Parts>();
	            i.add(part);
	            
	            order.setParts(i);
	             session.setAttribute("order", order);
	             

	             for(int j=0;j< order.getParts().size();j++) {
	                 sum+=order.getParts().get(j).getPrice();
	             }
	             part.setAmount((part.getAmount())-1);
	             userService.createpart(part);
	             
	             session.setAttribute("sum", sum);
	             session.setAttribute("amount", amount);
	             }
	         else {
	         orders order=(orders)session.getAttribute("order");
//	         User customer= userService.findUser(user);
	         User user = userService.findByEmail(email);
	             order.setUser(user);
	             order.getParts().add(part);

	             for(int j=0;j< order.getParts().size();j++) {
	                 sum+=order.getParts().get(j).getPrice();
	             }
	                 part.setAmount((part.getAmount())-1);
	                 userService.createpart(part);
	            session.setAttribute("sum", sum);
	             }
	         List<Parts> allparts=userService.allpart();
	    		model.addAttribute("allparts", allparts);
	             return "redirect:/makeorder";
	      }
	    //----------------------------------------------------------------------------------------------------------
	    @GetMapping("/disorder/{idI}")
	      public String disorder(@PathVariable("idI")Long idI,Principal principal,HttpSession session,Model model) { 

	        String email = principal.getName();
	         Parts part = userService.findById1(idI);
	         
	         orders order=(orders)session.getAttribute("order");
	         
	         ArrayList<Parts> parts =new ArrayList<Parts> ;
	        	
	         
//	           part.getOrders().remove(order);
	          
//	         System.out.println(order.getParts());
//	             order.getParts().remove(part);
//	             
//	             userService.createorder(order);
//	             userService.createpart(part);
//	             session.setAttribute("order1", order);
//	             System.out.println(order.getParts());

	             session.setAttribute("sum", (int)session.getAttribute("sum")-(part.getPrice()));
	                 part.setAmount((part.getAmount())+1);
	                 userService.createpart(part);
	 
		    	 User user = userService.findByEmail(email);
		    	 userService.updateUser(user);
		    	 model.addAttribute("user",user);
		    	model.addAttribute("order", order);
	             return "redirect:/mycart";
	      }
	    //----------------------------------------------------------------------------------------------------------
	    @RequestMapping("/mycart")
	    public String mycard(Principal principal,Model model,HttpSession session) {
	    	 orders order =(orders)session.getAttribute("order");
	    	
	    	 String email = principal.getName();
	    	 User user = userService.findByEmail(email);
	    	 model.addAttribute("user",user);
	    	model.addAttribute("order", order);
//	    	user.getOrders().get(0);
	    	return "CartPage.jsp";
	    }
	    @RequestMapping("/confirmorder")
	    public String mycardss(Principal principal,Model model,HttpSession session) {
	    	orders order =(orders)session.getAttribute("order");
	    	
	    	String email = principal.getName();
	    	User user = userService.findByEmail(email);
	    	String x =user.getEmail();
	    	order.setUser(user);
	    	
//	    	order.getParts().set(orderamount, session.getAttribute("amount")+);
	    	
	    	userService.createorder(order);
	    	model.addAttribute("Allorders", user.getOrders());
	    	model.addAttribute("sum", session.getAttribute("sum"));
	    	List<Parts> allparts=userService.allpart();
    		model.addAttribute("allparts", allparts);
    		session.setAttribute("order", null);
//    		senderService.sendSimpleEmail(x,
//    				"onlin Garage",
//    				"Thank you for ordering from our site , your order well be in your hands in two days");
	    	return "redirect:/home";
	    	
	    }
	    //---------------------------------------------------------------------------------------------------email
	    @PostMapping("/email/{mail}")
		public String sendEmail(@RequestParam("subject") String subject,@RequestParam("message") String message,@PathVariable("mail")String mail,HttpSession session) {
			senderService.sendSimpleEmail(mail,subject,message);
			Long is =(Long) session.getAttribute("mail");
			return "redirect:/send/email/"+is;
		}
//	    @EventListener(ApplicationReadyEvent.class)
//	    @GetMapping("/mails")
//		public void triggerMail() throws MessagingException {
//			senderService.sendSimpleEmail("ahmadhamdan8592@gmail.com",
//					"This is email body",
//					"This is email subject");
//		
//		}
	    @GetMapping("/send/email/{id}")
	    public String email(@PathVariable("id")Long id,Model model,HttpSession session,Principal principal) {
	    	String email = principal.getName();
	    	User user = userService.findByEmail(email);	
	        model.addAttribute("tutor", user);
	        session.setAttribute("mail", user.getId());
	        return "Email.jsp";
	    }
	    
//-------------------------------------------------------------------------------------------Part   	
	  
	    @PostMapping("/newpart")
	    public String createpart(@Valid @ModelAttribute("addpart") Parts part ,BindingResult result ,Model model,HttpSession session) {
	        if (result.hasErrors()) {
	            return "addparts.jsp";
	        } else {
	        	
	        	userService.createpart(part);
//	    		User user = userServ.findUser((Long)session.getAttribute("user_id"));
//	         	user.getTeams().add(car);
//	    		userServ.createTeam(car);
	            return "redirect:/home";
	        }
	    }
	    
	    @GetMapping("/deletee/{id}")
	      public String delete2(@PathVariable("id")Long id) {
	    	System.out.println("test");
//	    	Parts part = userService.findById1(id);
	    	userService.deletePart(id);
	    	  return "redirect:/admin";
	      }
//-----------------------------------------------------------------------------------------------------	the end    
//	     @GetMapping("edit/{id}")
//	  	 public String edit(@PathVariable("id")Long id,Model model) {
//	  		 Team project = userServ.findTeam(id);
//	  		 model.addAttribute("editteam", project);
//	  		 return "Edit.jsp";
//	  	 }


}



